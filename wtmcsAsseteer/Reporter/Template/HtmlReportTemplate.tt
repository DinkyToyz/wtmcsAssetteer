<#@ template language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<# Minify = true; #>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" />
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<meta name="generator" content="<#= BuildInfo #>" />
<title>Asset Report</title>
<style type="text/css"><#@ include file="HtmlReportTemplate.min.css" #></style>
<script language="javascript" type="text/javascript"><#@ include file="table.min.js" #></script>
<script language="javascript" type="text/javascript"><#@ include file="HtmlReportTemplate.es5.min.js" #></script>
</head>
<body>

<a id="top-table-showhide" class="top-table-showhide showhide">
	<span id="top-table-hide">&#9664;</span>
	<span id="top-table-show">&#9658;</span>
</a>

<div id="top-table-hideable">
<table class="top-table table-autostripe table-stripeclass:table-row-odd">
	<thead>
		<tr class="table-headers">
			<th colspan=1></th>
			<th colspan=3>Asset Counts</th>
			<th colspan=14>Mean Values for Built-Ins</th>
		</tr>
		<tr class="header-headers">
			<th colspan=1></th>
			<th colspan=3></th>
			<th colspan=7>Main</th>
			<th colspan=7>Lod</th></tr>
		<tr class="header-headers">
			<th colspan=1></th>
			<th colspan=3></th>
			<th colspan=1>Combined</th><th colspan=3>Triangles</th><th colspan=3>Textures</th>
			<th colspan=1>Combined</th><th colspan=3>Triangles</th><th colspan=3>Textures</th>
		</tr>
		<tr class="column-headers">
			<th class="txt">Type</th>
			<th class="num">All</th><th class="num">Built-In</th><th class="num">Custom</th>
			<th class="num">Weight</th><th class="num">Count</th><th class="num">Surface</th><th class="num">Weight</th><th class="num">Dimensions</th><th class="num">Area</th><th class="num">Weight</th>
			<th class="num">Weight</th><th class="num">Count</th><th class="num">Surface</th><th class="num">Weight</th><th class="num">Dimensions</th><th class="num">Area</th><th class="num">Weight</th>
		</tr>
	</thead>
	<tbody>
		<#
			foreach (AssetSizes sizes in MeanBuiltInAssetSizes)
			{
				#><tr>
					<td class="txt"><#= sizes.AssetType #></td>
					<td class="txt"><#= sizes.TotalAssetCount #></td>
					<td class="txt"><#= sizes.BuiltInAssetCount #></td>
					<td class="txt"><#= sizes.CustomAssetCount #></td>
					<td class="num"><# if (sizes.Main.InitializedTriangles) { #><#= sizes.Main.CombinedWeight #><# } #></td>
					<td class="num"><# if (sizes.Main.InitializedTriangles) { #><#= sizes.Main.TrianglesCount #><# } #></td>
					<td class="num"><# if (sizes.Main.InitializedTriangles) { #><#= sizes.Main.TrianglesSurfaceRounded #><# } #></td>
					<td class="num"><# if (sizes.Main.InitializedTriangles) { #><#= sizes.Main.TrianglesWeight #><# } #></td>
					<td class="dim"><# if (sizes.Main.InitializedTextures) { #><#= sizes.Main.TexturesDimensions #><# } #></td>
					<td class="num"><# if (sizes.Main.InitializedTextures) { #><#= sizes.Main.TexturesArea #><# } #></td>
					<td class="num"><# if (sizes.Main.InitializedBoth) { #><#= sizes.Main.TexturesWeight #><# } #></td>
					<td class="num"><# if (sizes.Lod.InitializedTriangles) { #><#= sizes.Lod.CombinedWeight #><# } #></td>
					<td class="num"><# if (sizes.Lod.InitializedTriangles) { #><#= sizes.Lod.TrianglesCount #><# } #></td>
					<td class="num"><# if (sizes.Lod.InitializedTriangles) { #><#= sizes.Lod.TrianglesSurfaceRounded #><# } #></td>
					<td class="num"><# if (sizes.Lod.InitializedTriangles) { #><#= sizes.Lod.TrianglesWeight #><# } #></td>
					<td class="dim"><# if (sizes.Lod.InitializedTextures) { #><#= sizes.Lod.TexturesDimensions #><# } #></td>
					<td class="num"><# if (sizes.Lod.InitializedTextures) { #><#= sizes.Lod.TexturesArea #><# } #></td>
					<td class="num"><# if (sizes.Lod.InitializedBoth) { #><#= sizes.Lod.TexturesWeight #><# } #></td>
				</tr><#
			}
		#>
	</tbody>
</table>
</div>

<table class="main-table table-autosort table-autofilter table-filtered-rowcount:main-table-visible-rowspan table-rowcount:main-table-total-rowspan table-autostripe table-stripeclass:table-row-odd">
	<thead>
		<tr class="table-headers"><th colspan=22>Assets (<span id="main-table-visible-rowspan"><#= AssetCount #></span>/<span id="main-table-total-rowspan"><#= AssetCount #></span>)</th></tr>
		<tr class="header-headers">
			<th colspan=4></th>
			<th colspan=7>Main</th>
			<th colspan=7>Lod</th>
			<th colspan=4></th>
		</tr>
		<tr class="header-headers">
			<th colspan=4></th>
			<th colspan=1>Combined</th><th colspan=3>Triangles</th><th colspan=3>Textures</th>
			<th colspan=1>Combined</th><th colspan=3>Triangles</th><th colspan=3>Textures</th>
			<th colspan=2>
				Usages
				<a class="showhide" id="dep-text-hide">&#9664;</a>
				<a class="showhide" id="dep-text-show">&#9658;</a>
			</th>
			<th colspan=2>
				References
				<a class="showhide" id="ref-text-hide">&#9664;</a>
				<a class="showhide" id="ref-text-show">&#9658;</a>
			</th>
		</tr>
		<tr class="column-headers">
			<th class="txt table-sortable:alphanumeric table-filterable">Source<span/></th>
			<th class="txt table-sortable:alphanumeric table-filterable">Type<span/></th>
			<th class="txt table-sortable:alphanumeric table-filterable">Category<span/></th>
			<th class="txt table-sortable:alphanumeric">Title</th>
			<th class="num table-sortable:numeric">Weight</th><th class="num table-sortable:numeric">Count</th><th class="num table-sortable:numeric">Surface</th><th class="num table-sortable:numeric">Weight</th><th class="num table-sortable:alphanumeric">Dimensions</th><th class="num table-sortable:numeric">Area</th><th class="num table-sortable:numeric">Weight</th>
			<th class="num table-sortable:numeric">Weight</th><th class="num table-sortable:numeric">Count</th><th class="num table-sortable:numeric">Surface</th><th class="num table-sortable:numeric">Weight</th><th class="num table-sortable:alphanumeric">Dimensions</th><th class="num table-sortable:numeric">Area</th><th class="num table-sortable:numeric">Weight</th>
			<th class="num table-sortable:numeric">Count</th><th class="txt table-sortable:alphanumeric">Assets</th>
			<th class="num table-sortable:numeric">Count</th><th class="txt table-sortable:alphanumeric">Assets</th>
		</tr>
	</thead>
	<tbody>
		<#
        {
			int assetCount = 0;
			foreach (AssetInfo asset in Assets) 
			{
				assetCount++; #>

				<tr>
					<td class=txt><#= asset.SourceType #></td>
					<td class=txt><#= asset.AssetType #></td>
					<td class=txt><#= asset.EscapedCategory #></td>
					<td class=nam><# 
					{
						if (asset.SteamId != 0) 
						{
							Write("<a href=\"{0}\" target=_blank>{1}</a>", asset.SteamLink, asset.EscapedTitle);
						}
						else
						{
							Write(asset.EscapedTitle);
						}
					}
					#></td>
					<td class=num><# if (asset.Main.InitializedTriangles) { #><#= asset.Main.CombinedWeight #><# } #></td>
					<td class=num><# if (asset.Main.InitializedTriangles) { #><#= asset.Main.TrianglesCount #><# } #></td>
					<td class=num><# if (asset.Main.InitializedTriangles) { #><#= asset.Main.TrianglesSurfaceRounded #><# } #></td>
					<td class=num><# if (asset.Main.InitializedTriangles) { #><#= asset.Main.TrianglesWeight #><# } #></td>
					<td class=dim><# if (asset.Main.InitializedTexture) { #><#= asset.Main.TextureDimensions #><# } #></td>
					<td class=num><# if (asset.Main.InitializedTexture) { #><#= asset.Main.TextureArea #><# } #></td>
					<td class=num><# if (asset.Main.InitializedTexture) { #><#= asset.Main.TextureWeight #><# } #></td>
					<td class=num><# if (asset.FallbackLod.InitializedBoth) { #><#= asset.FallbackLod.CombinedWeight #><# } #></td>
					<td class=num><# if (asset.Lod.InitializedTriangles) { #><#= asset.Lod.TrianglesCount #><# } #></td>
					<td class=num><# if (asset.Lod.InitializedTriangles) { #><#= asset.Lod.TrianglesSurfaceRounded #><# } #></td>
					<td class=num><# if (asset.FallbackLod.InitializedTriangles) { #><#= asset.FallbackLod.TrianglesWeight #><# } #></td>
					<td class=dim><# if (asset.Lod.InitializedTexture) { #><#= asset.Lod.TextureDimensions #><# } #></td>
					<td class=num><# if (asset.Lod.InitializedTexture) { #><#= asset.Lod.TextureArea #><# } #></td>
					<td class=num><# if (asset.FallbackLod.InitializedBoth) { #><#= asset.FallbackLod.TextureWeight #><# } #></td>
					<td class=num><#= asset.DependentCount #></td>
					<td class=txt><#
					{
						int references = asset.DependentCount;
						if (references > 0)
						{
							string id = assetCount.ToString() + "dep";
							Write("<a shbid={0} class=dephide id=hide{0}>&#9664;</a>", id);
							Write("<a shbid={0} class=depshow id=show{0}>&#9658;</a>", id);
							Write("<span class=deptxt id=txt{0}>", id);

							foreach (Reference reference in asset.Dependents.OrderBy(r => r.ReferenceType).ThenBy(r => r.Name.ToLowerInvariant()))
							{
								references --;

								Write("<span class=name>");

								if (reference.SteamId > 0)
								{
									Write("<a href=\"{0}\" target=_blank>{1}</a>", reference.SteamLink, reference.EscapedTitle);
								}
								else
								{
									Write(reference.EscapedTitle);
								}

								Write("</span>");

								if (references > 0)
								{
									Write("</br>");
								}
							}

							Write("</span>");
						}
					}
					#></span></td>
					<td class=num><#= asset.ReferenceCount #></td>
					<td class=txt><span class=rtxt><# 
					{
						int references = asset.ReferenceCount;
						if (references > 0)
						{
							string id = assetCount.ToString() + "ref";
							Write("<a shbid={0} class=refhide id=hide{0}>&#9664;</a>", id);
							Write("<a shbid={0} class=refshow id=show{0}>&#9658;</a>", id);
							Write("<span class=reftxt id=txt{0}>", id);

							foreach (Reference reference in asset.References.OrderBy(r => r.ReferenceType).ThenBy(r => r.Name.ToLowerInvariant()))
							{
								references --;

								if (reference.Missing)
								{
									Write("<span class=miss>");
								}

								Write("<span class=name>");
								Write(reference.ReferenceType);
								Write(": ");

								if (reference.SteamId > 0)
								{
									Write("<a href=\"{0}\" target=_blank>{1}</a>", reference.SteamLink, reference.EscapedTitle);
								}
								else
								{
									Write(reference.EscapedTitle);
								}

								Write("</span>");

								if (reference.Missing)
								{
									Write("</span>");
								}

								if (references > 0)
								{
									Write("<br/>");
								}
							}

							Write("</span>");
						}
					}
					#></span></td>
				</tr>
				<# 
			} 
		} #>
	</tbody>
</table>

</body>
</html>